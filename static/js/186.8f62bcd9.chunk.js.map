{"version":3,"file":"static/js/186.8f62bcd9.chunk.js","mappings":"gOAEAA,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAS,mCAaFC,EAAb,gHACE,yGAAaC,EAAb,+BAAoB,EAApB,kBAE2BH,EAAAA,EAAAA,IAAA,oDACwBC,EADxB,iBACuCE,IAHlE,cAEUC,EAFV,yBAKWA,EAASC,MALpB,gCAYIC,QAAQC,MAAR,MAZJ,yDADF,gHAiBE,WAAgBC,GAAhB,gGAE2BR,EAAAA,EAAAA,IAAA,iBACXQ,EADW,oCACmBP,IAH9C,cAEUG,EAFV,yBAKWA,EAASC,MALpB,gCAOIC,QAAQC,MAAR,MAPJ,yDAjBF,+GA4BE,WAAcC,GAAd,gGAE2BR,EAAAA,EAAAA,IAAA,iBACXQ,EADW,4CAC2BP,IAHtD,cAEUG,EAFV,yBAKWA,EAASC,MALpB,gCAOIC,QAAQC,MAAR,MAPJ,yDA5BF,kHAsCE,WAAiBC,GAAjB,4FAAqBL,EAArB,+BAA4B,EAA5B,kBAE2BH,EAAAA,EAAAA,IAAA,iBACXQ,EADW,4CAC2BP,EAD3B,iBAC0CE,IAHrE,cAEUC,EAFV,yBAKWA,EAASC,MALpB,gCAOIC,QAAQC,MAAR,MAPJ,yDAtCF,iHAgDE,WAAgBE,GAAhB,gGAE2BT,EAAAA,EAAAA,IAAA,8BACES,EADF,wDACsDR,EADtD,YAF3B,cAEUG,EAFV,yBAKWA,EAASC,MALpB,gCAOIC,QAAQC,MAAR,MAPJ,yDAhDF,6D,yGCbMG,EAAM,IAAIR,EAAAA,EA2ChB,UAzCgB,WACd,OAA8BS,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACMC,GAASC,EAAAA,EAAAA,MAoBf,OAnBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAM,mCAAG,6GAGQP,EAAIQ,WAAWJ,EAAOK,SAH9B,UAGLd,EAHK,8BAKTe,MAAM,4BALG,0BAQXP,EAAWR,EAAKgB,SARL,kDAUXf,QAAQC,MAAM,KAAMe,SAVT,4GAAH,qDAgBZL,GACD,GAAE,CAACH,EAAOK,WAET,8BACsB,IAAnBP,EAAQW,QACP,wBACGX,EAAQY,KAAI,SAAAC,GACX,OACE,2BACE,wBAAKA,EAAOC,UACZ,uBAAID,EAAOE,YAFJF,EAAOjB,GAKnB,OAGH,kDAIP,C","sources":["API/Api.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst keyApi = '6d070ee2b82df1d970d23eca62ef69da';\n\n// ===================================================================================\n// const options = {\n//   method: 'GET',\n//   url: 'https://api.themoviedb.org/3/trending/all/day?language=en-US',\n//   headers: {\n//     accept: 'application/json',\n//     Authorization:\n//       'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2ZDA3MGVlMmI4MmRmMWQ5NzBkMjNlY2E2MmVmNjlkYSIsInN1YiI6IjY0OTExN2NmNDJiZjAxMDExZTc1MTQzYiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.S6VKiZqFJ17KU30nJMe8ewgWIwV0rkd-iqWQtxFXFF0',\n//   },\n// };\n//======================================================================================\nexport class NewApi {\n  async getAll(page = 1) {\n    try {\n      const response = await axios.get(\n        `/trending/all/day?language=en-US/&api_key=${keyApi}&page=${page}`\n      );\n      return response.data;\n\n      // ==============================================================================\n      // const response = await axios.request(options);\n      // return response;\n      // ============================================================================\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async getFilmId(id) {\n    try {\n      const response = await axios.get(\n        `/movie/${id}?language=en-US/&api_key=${keyApi}`\n      );\n      return response.data;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async getCast(id) {\n    try {\n      const response = await axios.get(\n        `/movie/${id}/credits?language=en-US/&api_key=${keyApi}`\n      );\n      return response.data;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  async getReviews(id, page = 1) {\n    try {\n      const response = await axios.get(\n        `/movie/${id}/reviews?language=en-US/&api_key=${keyApi}&page=${page}`\n      );\n      return response.data;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  async getMovies(name) {\n    try {\n      const response = await axios.get(\n        `/search/movie?query=${name}&include_adult=false&language=en-US/&api_key=${keyApi}&page=1`\n      );\n      return response.data;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n}\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { NewApi } from 'API/Api';\nconst api = new NewApi();\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const params = useParams();\n  useEffect(() => {\n    const getApi = async () => {\n      // setStatus(true);\n      try {\n        const data = await api.getReviews(params.movieId);\n        if (!data) {\n          alert('sorry no information yet');\n          return;\n        }\n        setReviews(data.results);\n      } catch (error) {\n        console.error(error.messeng);\n      } finally {\n        // setStatus(false);\n        return;\n      }\n    };\n    getApi();\n  }, [params.movieId]);\n  return (\n    <>\n      {reviews.length !== 0 ? (\n        <ul>\n          {reviews.map(review => {\n            return (\n              <li key={review.id}>\n                <h3>{review.author}</h3>\n                <p>{review.content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <h3>Sorry no reviews yet</h3>\n      )}\n    </>\n  );\n};\nexport default Reviews;\n"],"names":["axios","keyApi","NewApi","page","response","data","console","error","id","name","api","useState","reviews","setReviews","params","useParams","useEffect","getApi","getReviews","movieId","alert","results","messeng","length","map","review","author","content"],"sourceRoot":""}